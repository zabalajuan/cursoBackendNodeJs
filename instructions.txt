Clase 4 - Docker
Creamos archivo configuración de Docker
  docker-compose.yml
    aqui le diremos que contenedores vamos a necesitar
      version
      servicios a usar
  una vez con el archivo, lanzamos el contenedor
  comando -d es un dettach - que corra en segundo plano
    docker-compose up -d postgres
    mostrar contenedores activos
      docker-compose ps
    bajar contenedores activos
      docker-compose down
Los contenedores como tal no tienen un estado/persistencia, siq ueremos que la tengan, debemos agregar un volumen
    el volumen agregado a la documentacion, depende de la imagen que vamos a usar, revisar documentacion docker

Claes 5 - Interfaces gráficas vs terminal
  Paso 1 levantar el servicio
    docker-compose up -d postgres
  paso 2 - para conectarse con superpoderes, terminal
    docker-compose exec postgres bash

  Comandos
  Conectarnos a la base de datos -h localhost (host) local -d my_store es la base de datos -U akira es el usuario
    psql -h localhost -d my_store -U akira

  para saber la estructura de la base de datos, dentro de ella, el comando es
    \d+

  para salirnos de la base de datos
    \q

  Para salirnos del contenedor
    exit

  Para conectarnos a partir de un motor grafico
    Vamos a definir otro servicio dentro de nuestro docker
    Hicimos las modificaciones en el docker-compose.yml para su configuración
    comando para levantar servicios
      docker-compose up -d pgadmin
    Entramos al navegador
      localhost:5050
    nos loggeamos
    Es necesario conectar la base de datos
      Object > create > Server group
      Add new server
        es necesario obtener la IP de nuestro contenedor
          primero busco el id del contenedor
            docker ps
              identifico el id del contenedor y lo inspeccionamos
                docker inspect {id_del contenedor}
                  identificamos la IP en la que corre

                  ingresamos los datos en la interfaz grafica para que la conexion quede lista

  Clase 6 - Integración con node-postgres
    Instalación
      npm install pg
    Añadimos la carpeta libreria, donde agregaremos las conexiones a terceros (ya sea APIs o bases de datos)

    ESta configuración hace que cada vez que llamamos la conexion, se crea un request nuevo, lo cual no es optimo
    //por eso crearemos un pool, clase 7

  Clase 7 - Manejando un pool de conexiones

  Clase 8 - Variables de entorno
    No es seguro pasar las credenciales en el codigo
      creamos carpeta config

    para pasar los accesos vamos a usar el archvo .env
      //impoprtante, sacarlo del repositorio (gitignore)

    una vez creado el archivo .env, debemos usar un paquete, para pasarselo al archivo config
      npm i dotenv

  Clase 9 Object Relational Model ORM
    en el entorno de Node los ORM mas conocidos son
      Sequelize
        npm install --save sequelize
          se necesitan dos drivers adicionales
            npm install --save pg pg-hstore

  Clase 10 - Modelo para base de datos con sequelize
    creamos carpeta db

  Clase 11 - CRUD Create Read Update Delete

  clase 12 - Cambiando la base de datos
    gracias al modelo que creamos, podemos cambiar la base de datos facilmente
    Creamos la simagenes en el archivo de configuracion de Docker, tanto mysql como la interfaz grafica phpmyadmin
      levantamos el servicio mysql
        docker-compose up -d mysql
      revisar si se levantó el servicio
        docker-compose ps
      levantamos el servicio phpmyadmin
        docker-compose up -d phpmyadmin

    es necesario instalar el driver para mysql
      npm install --save mysql2

        como casi todas las configuraciones son iguales, solo cambiando el puerto en el .env deberia ser suficiente
          para acceder a mysql en vez de postgres

        el otro cambio a realizar es en sequelize, diciendole que el dialect es mysql

  Clase 13 - Migraciones
    para correr migrations debemos instalar una libreria de sequelize, lo hicimos como dependencia desarrollo
      npm i sequelize-cli --save-dev
    una vez instalado, debemos crear el archivo de configuracion
      .sequelizerc

  Clase 14 - configurando y corriendo migraciones con npm scripts
    sequelize lo que nos da es un motor/bolierplate para manejo de migraciones, pero somos nosotros
      los que tenemos que correr estas migraciones

      lo primero sera configurar unos scripst nuevos en el package.json
        "migrations:generate" : "sequelize-cli migration:generate --name"
          corrimos el comando
            npm run migrations:generate create-user

        el siguiente paso es modificar el archivo de la migracion db/migrations/archivo

        y despues para poderlo correr, correr la migracion, debemos geenrar otro script
          "migrations:run": "sequelize-cli db:migrate"
        y el comando para revertir lo que se hizo es
          "migrations:revert": "sequelize-cli db:migrate:undo"
        otro comando que vaciaría todas la smigraciones es:
          "migrations:delete": "sequelize-cli db:migrate:undo:all"
    Una vez hecho lo anterior, ahora si vamos a correr todo con migrations
      lo primero seria el comando
        npm run migrations:run

  Clase 15 - Modificar una entidad
    con sync() no se puede alterar una tabla que ya esta creada
    Las migrations si nos permiten esto, vamos a agregar a la tabla Users el campo role
      primero alteramos el models/user.model.js agregando el campo role
    ahora debo hacer la nueva migration
      npm run migrations:generate add-role
        y modificamos el archivo de la migration

    Para correr la migration
      npm run migrations:run

  CLase 16 - Relaciones Uno a Uno
    un cliente solo puede tener un usuario
      Customer A - User B
        Option 1 - Has One -> la relación queda en la entidad B
        Option 2 - Belongs to -> la relación queda en la entidad A
          En este ejemplo puntual usaremos customer Belongs To User
            las asociaciones se declaran en el customer.model.js
              en el metodo statis associate()
            una vez declarada la asociacion, debemos modificar el index.js de los modelos
              en el setupModels, despues de declarar los esquemas, definimos las asociaciones
            AHora, a esta asociación, debemos crearle un schema, modificar el customer.models.js

            una vez definido, lo último es hacer la migration

            Ajustamos el customer.schema.js para que en la creación del customer, tenga en cuenta el id del usuario,
              Hecho esto, lo siguiente es ajustar el metodo crear en el customer.service.js

  Clase 17 - Resolviendo las Relaciones uno a uno
    Primero hicimos una nueva migration, para indicar que solo puede haber un customer per user
      si la tabla tiene conflictos, como es el caso actual, debemos ajustar la tabla, o no nos dejara hacer lamigracion
      ajustamos la tabla manualmente

    Ahora, como resolver de forma anidada validaciones, debemos modificar el servicio => customers.service.js

    Ahora, modificamos para que al crear un customer, se ingresen los datos del usuario tambien
      empezamos por modificar el customer.schema.js



